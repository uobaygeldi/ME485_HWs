[backend-cpu]
multi-thread = parallel

[mesh]
#in_name=squaregrid.msh
#in_name=grads.msh
in_name=grad.msh
#in_name=gradak2.msh
#in_name=gradak1.msh
#in_name=gradok1.msh
#in_name=gradok2.msh
#in_name=gradok3.msh
out_name=grad.pbm

[constants]
gamma = 1.4

[solver]
system = grad
order = 2
limiter = None
#gradient = weighted-least-square
gradient = green-gauss-cell
#gradient = least-square

[solver-time-integrator]
mode = None

[soln-ics]
q = sqrt(x*x+y*y)
#q = x**32+y**32
#q = x**2+y**2
#q = cos(x**2+y**2)

[soln-bcs-inner]
type = drichlet
#type = neumann
#q = 1 # for neumann
q = 0.141421356237310 # sqrt(x^2 + y^2)
#q = 0.02 # x^2 + y^2 for regular size
#q = 281477124194304 # x^32 + y^32 for Ali Kaya mesh 1
#q = 11958255808001100 # x^32 + y^32 for Ali Kaya mesh 2
#q = 3 # sqrt(x^2+y^2) ali k mesh1
#q = 2.55936249588026 # sqrt(x^2+y^2) ali k mesh2
#q = 0.212132034355964 # onur k mesh 3 sqrt
#q = 10 # (x^2+y^2) ali k mesh1
#q = 0.045 # onur k square ^2 + ^2
#q = 10 # ali k 1 ^2+^2
#q = 7.34333333333333 # alik 2 ^2 +^2
#q = 2*10**(-32) # 32 32 normal size
#q = 8.62879766547977E-27 # square iner 32 32
#q = 174*10^-6 # cos stuff for regular circ
#q = 0.998987670847842 # square cos
#q = -0.805651550593497 # ali k 1 cos
#q = -0.529598755047512 # ali k 2 cos

[soln-bcs-outer]
type = drichlet
#type = neumann
#q = 1 # for neumann
q = 1.414213562373095 # sqrt(x^2 + y^2)
#q = 2 # x^2 + y^2 for regular size
#q = 46566128730773928280064 # x^32 + y^32 for Ali Kaya mesh 2 and 1
#q = 7.07106781186547 # sqrt(x^2+y^2) ali k mesh1 & 2
#q = 0.707106781186547 # onur k mesh 3 sqrt
#q = 50 #(x^2+y^2) ali k mesh1
#q = 0.5 # onur k square ^2 + ^2
#q = 50 # ali k ^2 + ^2
#q = 2 # 32 32 normal size
#q = 4.65661287307739E-10 #square 3232
#q = 0.0175 # cos for regular
#q = 0.877582561890372 # square cos
#q = 0.964966028492113 # ali k cos

[soln-plugin-writer]
name = grad_out
iter-out = 1

